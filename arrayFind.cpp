#include <iostream>
#include <vector>

//查找单行
bool BiSearchSingle(int target, std::vector<std::vector<int>>& array,int row){
    int left=0,right=array[0].size()-1;
    while(left<=right){
        int mid=left+(right-left)/2;
        if(array[row][mid]==target){
            return true;
        } else if(array[row][mid]>target)
            right=mid-1;
        else if(array[row][mid]<target)
            left=mid+1;
    }
    return false;
}

//递归调用,由row->row-1一行一行递归完row以上的全部
bool BiSearch(int target, std::vector<std::vector<int>>& array,int row){
    if(row==-1)
        return false;
    int left=0,right=array[0].size()-1;
    while(left<=right){
        int mid=left+(right-left)/2;
        if(array[row][mid]==target){
            return true;
        } else if(array[row][mid]>target)
            right=mid-1;
        else if(array[row][mid]<target)
            left=mid+1;
    }
    return BiSearch(target,array,row-1);
}
//二分查找，提交到牛客网上堆栈溢出（由于递归调用层数太多等）,但是clion里该案例运行正确
//high=array[0].size()-1（闭区间）时（1）low<=high和high=middle-1 (2）low<high和high=middle-1，且最后加上补丁：nums[low] == target ? low : -1;
//high=array[0].size()(开区间)时low<high和high=middle
bool Find(int target, std::vector<std::vector<int>> array) {
    int rowNum=array.size();
    if(rowNum==0)return false;
    //先判断rowNum不等于0，不然使用array[0]会越界
    int colNum=array[0].size();
    if(colNum==0)return false;
    int low=0,high=rowNum-1;
    while(low<=high){
        int middle=low+(high-low)/2;
        if(array[middle][0]==target)
            return true;
        else if(array[middle][0]>target){
            high=middle-1;
        } else if(array[middle][0]<target){
            if(array[middle-1][colNum-1]==target){
                return true;
            }else if(array[middle-1][colNum-1]>target){
                //当在middle-1行没找到时不能判断middle-1行以上不存在，应一行一行的找上去，
                if(BiSearch(target,array,middle-1))return true;
                //当middle上面所有的行中都不存在，判断middle行中是否存在
                else if(array[middle][colNum-1]==target)
                    return true;

                //若小于middle行最大值则在middle该行查找之后
                else if(array[middle][colNum-1]>target){
                    if(BiSearchSingle(target,array,middle))return true;
                }
                //若array[middle][colNum-1]<target则大于middle行最大值，即包括middle所在行的上面行都不存在该值，取值下移
                //若BiSearchSingle(target,array,middle)==false说明没有在middle行找到target，即包括middle所在行的上面所有行都不存在该值，取值下移
                low=middle+1;

            }
            //当middle上面所有的行中都不存在，判断middle行中是否存在
            else if(array[middle-1][colNum-1]<target){
                if(array[middle][colNum-1]==target)
                    return true;
                else if(array[middle][colNum-1]>target){
                    if(BiSearchSingle(target,array,middle))return true;
                }
                //若array[middle][colNum-1]<target则大于middle行最大值，即包括middle所在行的上面行都不存在该值，取值下移
                //若BiSearchSingle(target,array,middle)==false说明没有在middle行找到target，即包括middle所在行的上面所有行都不存在该值，取值下移
                low=middle+1;
            }
        }
    }
    return false;
}

//时间复杂度：O(行高+列宽)
//空间复杂度：O(1)
bool FindLeftBottom(int target, std::vector<std::vector<int>> array) {
    int rowNum=array.size();
    if(rowNum==0)return false;
    int colNum=array[0].size();
    if(colNum==0)return false;
    //从左下（列的最大值，行的最小值）开始，一次可以排除一列或者一行
    int row=rowNum-1,col=0;
    while(row>=0&&col<=colNum-1){
        if(array[row][col]==target)
            return true;
        //比列的最大大，只能取值右移一位
        else if(array[row][col]<target)
            col++;
        //比行的最小小，只能取值上移一位
        else if(array[row][col]>target)
            row--;
    }
    return false;
}

//时间复杂度：O(行高+列宽)
//空间复杂度：O(1)
bool FindRightTop(int target, std::vector<std::vector<int>> array) {
    int rowNum=array.size();
    if(rowNum==0)return false;
    int colNum=array[0].size();
    if(colNum==0)return false;
    //从右上（行的最大，列的最小）开始，一次可以排除一列或者一行
    int row=0,col=colNum-1;
    while(row<rowNum&&col>=0){
        if(array[row][col]==target)
            return true;
        //比行的最大大，列的最小大，取值下移一位
        else if(array[row][col]<target)
            row++;
        //比列的最小小，比行的最大小，取值左移一位
        else if(array[row][col]>target)
            col--;
    }
    return false;
}

int main() {
    std::vector<std::vector<int>> vec{{0,1,3,4,5,7,8,11,13,15,18,21,24,27,30,32,35,36,39,41,42,43,46,49,52,55,58,60,63,66,67,69,72,75,78,80,81,82,85,86},{1,4,6,8,11,12,15,17,18,20,23,24,27,30,33,34,38,39,42,44,47,48,51,52,55,57,59,62,64,67,70,72,75,77,81,83,84,87,90,91},{4,7,8,11,14,16,18,20,21,24,27,29,32,35,36,39,40,42,44,46,49,52,54,56,58,60,61,64,67,70,73,76,78,81,84,87,89,91,93,96},{5,8,10,13,15,19,21,23,24,27,29,31,34,37,38,41,43,45,46,49,52,55,58,59,61,64,67,69,71,72,76,78,79,83,87,90,91,94,96,97},{6,11,14,16,18,21,24,27,29,32,33,35,36,40,42,44,47,50,51,52,54,58,60,62,64,67,70,73,76,79,82,84,87,88,91,94,97,99,101,102},{9,13,16,19,21,23,25,29,31,35,38,39,42,45,48,51,54,56,57,60,63,64,67,69,72,73,74,76,79,81,85,88,90,92,95,98,100,101,104,106},{10,16,19,21,24,26,29,31,34,36,40,41,45,46,50,54,56,59,60,63,66,69,70,72,75,77,79,81,83,85,88,91,93,96,98,99,102,105,107,109},{12,18,21,25,26,29,32,33,37,39,42,44,47,50,52,57,59,61,62,66,68,71,72,74,76,80,82,84,87,90,92,94,95,98,101,102,105,107,109,112},{14,20,25,27,30,32,35,37,40,43,44,47,49,52,54,58,60,63,65,68,70,73,75,76,78,83,84,86,89,92,93,97,99,101,103,104,107,110,113,116},{17,23,28,29,32,33,38,40,42,46,49,50,52,55,56,60,63,65,68,71,74,75,78,81,84,87,89,92,95,96,99,100,102,104,106,108,110,113,115,118},{18,22,30,31,35,38,41,43,45,48,52,53,55,58,60,62,66,67,70,73,76,77,79,82,86,89,92,95,98,101,102,103,106,109,111,112,114,117,119,121},{21,28,32,34,38,40,42,45,47,50,53,56,59,60,61,63,69,71,74,75,78,80,83,84,87,90,93,98,100,104,107,110,111,113,116,117,118,120,122,123},{23,29,34,36,41,43,46,49,52,54,55,58,60,63,65,67,72,74,75,77,80,82,85,88,91,94,97,100,103,106,110,113,114,116,119,122,124,125,126,129},{24,31,35,37,43,46,48,50,55,58,60,62,63,65,68,69,73,75,78,80,81,85,86,89,93,96,99,103,106,108,113,116,118,120,122,125,128,130,132,133},{25,33,38,41,45,47,51,53,58,60,63,65,66,68,70,72,74,77,80,82,83,86,88,91,94,97,100,106,107,109,115,119,121,122,124,126,129,131,135,136},{27,34,39,43,46,48,54,55,60,63,66,69,70,73,75,76,77,79,83,84,87,90,93,95,98,99,103,109,110,113,116,121,124,126,128,131,133,136,137,139},{30,35,42,46,48,50,57,60,63,65,68,71,74,77,78,81,82,84,86,88,91,94,97,99,101,102,105,112,113,114,119,124,127,129,132,134,137,140,142,145},{33,36,45,48,51,54,60,63,66,67,71,74,77,80,82,84,85,88,91,92,95,97,98,101,103,106,108,113,115,116,121,125,129,132,134,135,140,141,143,148},{36,39,47,50,54,55,63,66,69,70,72,76,79,82,84,86,88,90,92,95,98,101,102,104,106,109,110,116,119,122,123,128,131,134,135,136,142,144,147,150},{37,40,50,53,56,57,64,67,71,73,75,79,81,85,86,88,90,93,95,96,100,103,105,108,110,112,113,117,121,125,127,131,133,135,137,139,143,147,150,153},{39,43,53,55,58,60,67,70,72,76,78,82,84,88,90,91,92,95,96,98,103,105,108,110,112,115,116,118,124,128,130,134,137,139,141,143,144,150,153,156},{41,45,54,58,59,63,70,72,75,79,82,84,87,91,93,94,96,98,99,100,106,107,111,113,116,118,121,122,127,131,133,136,140,141,143,146,148,153,156,157},{42,46,56,60,63,65,72,73,76,81,85,87,90,93,95,97,99,102,103,106,109,111,114,116,117,121,123,125,130,133,136,137,142,145,147,149,151,155,159,161},{45,47,58,62,66,69,73,74,77,82,86,89,91,94,98,100,103,105,108,110,113,114,117,119,122,124,126,129,131,136,139,140,143,148,149,151,153,157,160,162},{48,49,59,63,67,70,75,77,80,85,89,92,94,97,100,102,104,106,111,113,115,117,120,123,126,128,131,134,136,138,141,142,145,150,152,154,157,160,163,166},{49,52,61,66,68,71,78,79,82,86,90,93,97,98,101,104,107,109,112,115,118,120,123,125,128,131,133,136,139,140,144,147,149,153,155,158,159,163,166,168},{50,55,63,67,70,73,80,83,85,88,93,96,99,102,104,106,110,113,115,118,121,124,126,128,131,133,136,138,142,144,147,149,152,155,158,160,161,165,169,170},{51,57,65,69,72,75,82,84,87,89,96,97,101,105,107,108,111,114,117,120,123,127,128,131,132,136,139,141,144,147,148,152,153,157,160,162,164,167,171,173},{54,59,66,70,75,78,84,86,90,91,97,100,103,107,110,113,115,118,121,122,125,128,130,133,135,137,141,143,145,149,151,155,156,158,162,164,167,170,174,176},{55,62,69,71,78,81,86,89,92,94,100,101,105,108,113,116,118,121,124,126,128,129,132,135,137,139,143,146,149,152,155,157,159,160,164,167,170,172,175,178},{56,65,71,72,80,84,88,91,95,98,101,103,107,111,115,118,121,124,126,129,131,133,134,137,140,143,145,149,151,153,158,161,163,165,167,170,173,176,178,181},{58,68,72,75,81,86,91,94,98,101,103,106,109,114,117,119,122,125,129,131,134,136,138,140,143,146,148,150,153,156,160,163,166,169,170,172,175,178,179,182},{59,70,75,77,82,87,92,97,100,103,106,108,111,117,120,123,126,128,132,134,136,139,141,143,145,149,151,153,155,157,162,165,169,171,172,175,177,180,183,185},{61,73,78,80,85,90,94,99,101,105,107,110,113,120,123,126,129,131,134,136,139,140,142,146,147,152,154,156,158,160,164,167,171,174,176,177,180,183,184,187},{64,75,79,82,87,92,97,101,104,108,111,113,116,123,126,128,132,135,138,139,140,143,146,149,150,155,157,159,161,162,167,168,174,176,179,181,182,186,189,191},{66,77,80,85,88,95,100,103,107,111,112,116,117,126,129,131,135,137,139,141,142,144,149,151,153,156,159,162,165,166,170,172,175,179,181,184,185,188,191,193},{67,79,81,87,91,96,103,106,110,112,115,118,120,127,132,134,136,139,141,144,147,150,152,155,157,159,161,164,167,169,171,173,177,181,183,185,188,190,193,196},{69,81,83,89,92,97,104,109,111,113,118,120,123,129,133,137,139,140,143,145,148,153,156,158,160,161,164,167,170,173,175,176,178,184,187,188,190,193,196,198},{71,82,84,91,95,100,107,111,114,116,121,124,127,132,135,140,141,142,144,147,150,155,157,159,163,164,165,169,172,176,177,179,180,186,188,190,192,195,199,201},{73,83,85,92,96,103,108,114,117,120,123,125,130,135,137,143,146,149,151,152,155,157,160,161,164,167,168,170,173,178,181,184,185,189,191,193,195,198,201,204}};
    std::cout << Find(22,vec)<< std::endl;
}